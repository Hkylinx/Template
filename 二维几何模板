#include<cmath>
#include<cstdio>
#include<cstdlib>
#include<algorithm>
using namespace std;
const int maxn=1e2+4;
struct Point{
	double x,y;
	Point(double x=0, double y=0): x(x), y(y) {}
}p[maxn],X;
int n,t,T;
typedef Point Vector; typedef Point P; typedef Vector V;
V operator + (V a, V b){  return V(a.x+b.x, a.y+b.y); }
V operator - (P a, P b){  return V(a.x-b.x, a.y-b.y); }
V operator * (V a, double p){  return V(a.x*p, a.y*p); }
V operator / (V a, double p){  return V(a.x/p, a.y/p); }
const double eps=1e-10;
int dcmp(double x){	if(fabs(x)<eps) return 0; else return x<0? -1: 1;}
bool operator == (const P &a, const P &b){	return dcmp(a.x-b.x)==0&& dcmp(a.y-b.y)==0;}
bool operator < (const P &a, const P &b){  return a.x==b.x? a.y<b.y: a.x<b.x; }

double Dot (V a, V b){ return a.x*b.x+a.y*b.y; }
double Length (V a){ return sqrt(Dot(a,a)); }
double Angle (V a, V b){ return acos(Dot(a,b)/ Length(a)/ Length(b) ); }
double Cross (V a, V b){ return a.x*b.y-a.y*b.x; }
double Area2 (P a,P b,P c){ return Cross(b-a,c-a); }

double PolygonArea(){
	double area=0;
	for(int i=1;i<n-1;i++)
		area+= Cross(p[i]-p[0], p[i+1]-p[0]);
	return fabs(area/2);
}

bool OnSegment (P a, P l1,P l2){	return dcmp(Cross(l1-a,l2-a))==0&& dcmp(Dot(l1-a,l2-a))<0; }
bool PointInPolygon (P a){
	int wn=0,k,d1,d2;
	for(int i=0;i<n;i++){
		if(OnSegment(a,p[i],p[(i+1)%n])) return 1;
		k= dcmp(Cross(p[(i+1)%n]-p[i],a-p[i]));
		d1= dcmp(p[i].y-a.y);
		d2= dcmp(p[(i+!)%n].y-a.y);
		if(k>0&& d1<=0&& d2>0) wn++;
		if(k<0&& d2<=0&& d1>0) wn--;
	}
	return wn==0;
}
